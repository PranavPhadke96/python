# OOP Python Basics
The class keyword lets us define a class. We use it just like we do the def keyword for making functions. Class definitions are blocks like function definitions.

class NewClass:
Inside of the class, variables are called attributes.

class NewClass:
    name_attribute = "Kenneth"
And functions that are defined inside of a class are called methods.

class NewClass:
    name_attribute = "Kenneth"

    def name_method(self):
        return self.name
Whenever we call a class, it creates an instance. Each instance has full access to the all of the attributes and methods of the class.

new_instance = NewClass()
new_instance.name_method()


We'll be doing a lot of importing in this course because it gives us the best way of organizing our code into logical bunches. It's a good practice to get into!

Notice that we can immediately read and write our class attributes! We don't usually write getters or setters (methods for retrieving or updating data on an instance) in Python.

You don't have to call the instance argument self if you don't want to. It's not a required name but it's a very common convention (I don't think I've ever seen code that didn't).

class Thief:
    sneaky = True

    def pickpocket(instance):
        if instance.sneaky:
            return bool(random.randint(0, 1))
        return False
      
Method Arguments
All of the same rules apply to method arguments as they do to function arguments, with the exception that the first argument has to represent the instance. You can use default values, *args, and **kwargs all you want!

Did the setattr() usage in this video catch you off-guard? Let's talk about what it is and what it's doing.

First, read the docs about it. I know documentation can sometimes be hard to read, but getting in the habit of reading it, starting there, will help you a lot in the long run.

Now, let's try an experiment. I have a class:

class Animal:
    def __init__(self, **kwargs):
        self.species = kwargs.get("species")
        self.age = kwargs.get("age")
        self.sound = kwargs.get("sound")
I'm using **kwargs here to pack any and all keyword arguments into a dictionary. And then I'll make a wolf using that class.

>>> wolf = Animal(species="Canus Lupus", age=5, sound="howl", color="gray")
>>> wolf.species
"Canus Lupus"
Great. No errors, Python's happy, I have an instance of my Animal class. In the __init__, I set three attributes: species, age, and sound. I didn't set color, though. Is it available?

>>> wolf.color
AttributeError...
No, it's not! But there weren't any errors when I created the instance. Why isn't the attribute available?

Well, because I didn't create it. Remember, Python is very explicit. If I don't do something explicitly, Python doesn't do it at all. Since I didn't assign a color attribute to self, my instance doesn't have a color attribute.

This is where setattr comes in. setattr lets me set attributes that I don't know about beforehand. I can, of course, go back and explicitly define a color attribute but what if the next user comes along and she wants a height or weight attribute? A year from now, Animal.__init__ might be hundreds of lines long with attribute declarations! And some of those attributes will only apply to a few animals!

But...if I'm clever and use setattr, I can just happily accept any and all attributes that someone gives for a particular Animal instance without having to continually update __init__.

class Animal:
    def __init__(self, **kwargs):
        for attribute, value in kwargs.items():
            setattr(self, attribute, value)
So, since I have a handy-dandy kwargs dict due to using **kwargs in the method parameters, I can loop through it's items method and pull out the two values from each iteration into attribute and value variables.

The setattr function takes three arguments: the object to work on, the attribute name to define, and the value to give that attribute. Now, no matter what attribute values I give to my object (assuming they're valid attribute names), my class will happily apply them.

So what's the sneakier way than using setattr()? Every object has an attribute named __dict__ that is a dictionary representation of the writable attributes of an object. You can update dictionaries so you could do:

class Thief:
    def __init__(self, name, **kwargs):
        self.name = name
        self.__dict__.update(kwargs)
Usually, though, you don't want to update .__dict__ directly as it's mostly meant to be a read-only resource. Just because you can write to it doesn't mean you should!
        
        
Inheritance in Python is both easier and harder than in some other languages. Python's inheritance usually works exactly how you expect it to. The child classes, or subclasses, get all of the attributes and methods of their parents and grandparents and so on. But thanks to things like the "method resolution order (MRO)", which we'll talk about later, sometimes it's not that simple. But let's not worry about that just yet! Make sure you understand these terms before moving on:

Parent or Super class: the class that a class inherits from. These can go on for a long way, too, so be sure to consider grandparent and great-grandparent classes, too.
All classes have the ultimate ancestor of object.

Child or Sub class: the class that inherits from a particular class.
Consider this:

class Symbol:
    pass


class Letter(Symbol):
    pass


class Alpha(Letter):
    pass
The class Letter has two superclasses: Symbol and object (since Symbol inherits from object even though we didn't explicitly state it). Letter has one subclass, Alpha.

An instance of the class Alpha could use any attributes or methods that were defined on Symbol or Letter. Those two classes, though, wouldn't have access to attributes or methods that belonged to Alpha. Inheritance is a one-way street.
